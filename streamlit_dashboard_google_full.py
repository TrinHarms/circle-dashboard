
import streamlit as st
import pandas as pd
import plotly.express as px

st.set_page_config(page_title="Circle Condo Dashboard", layout="wide")

st.title("üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô‡πÑ‡∏´‡∏ß")
st.markdown("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏° Google Sheets + ‡πÅ‡∏ú‡∏ô‡∏ã‡πà‡∏≠‡∏°‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°")

# Load Google Sheet as CSV
sheet_id = "1Chr7GsJxl99sK9-9vW0ZM-t6xbphTLiUYn36v_HpHPI"
sheet_url = f"https://docs.google.com/spreadsheets/d/{sheet_id}/export?format=csv"

try:
    df = pd.read_csv(sheet_url)
except Exception as e:
    st.error(f"‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheets ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
    st.stop()

# Extract key columns
room_col = [col for col in df.columns if "Room No" in col][0]
damage_col = [col for col in df.columns if "‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢" in col][0]
image_col = [col for col in df.columns if "‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û" in col or "Picture" in col][-1]

# Clean and expand data
df_filtered = df[[room_col, damage_col, image_col]].dropna(subset=[room_col, damage_col])
df_filtered['Damage Types'] = df_filtered[damage_col].str.split(',')
df_filtered = df_filtered.explode('Damage Types')
df_filtered['Damage Types'] = df_filtered['Damage Types'].str.strip()

# Summary
freq = df_filtered['Damage Types'].value_counts().reset_index()
freq.columns = ['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏ö']

room_group = df_filtered.groupby(room_col)['Damage Types'].count().reset_index()
room_group.columns = ['‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡πâ‡∏≠‡∏á', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢']
room_top = room_group.sort_values(by='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢', ascending=False).head(10)

# --- Tabs ---
tab1, tab2 = st.tabs(["üìã ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°", "üìÜ ‡πÅ‡∏ú‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£"])

with tab1:
    damage_types = sorted(df_filtered['Damage Types'].dropna().unique())
    selected = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢", damage_types, default=damage_types)

    df_view = df_filtered[df_filtered['Damage Types'].isin(selected)]

    st.markdown("### üîé ‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢")
    fig = px.bar(freq[freq['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢'].isin(selected)],
                 x='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏ö', y='‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢', orientation='h')
    st.plotly_chart(fig, use_container_width=True)

    st.markdown("### üè† ‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î")
    st.dataframe(room_top, use_container_width=True)

    st.markdown("### üì∏ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏†‡∏≤‡∏û‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö")
    def make_link(url):
        if pd.notnull(url) and str(url).startswith("http"):
            return f'<a href="{url}" target="_blank">‡∏î‡∏π‡∏†‡∏≤‡∏û</a>'
        return ''
    df_view['‡∏î‡∏π‡∏†‡∏≤‡∏û'] = df_view[image_col].apply(make_link)
    st.write(df_view[[room_col, 'Damage Types', '‡∏î‡∏π‡∏†‡∏≤‡∏û']].to_html(escape=False, index=False), unsafe_allow_html=True)

with tab2:
    st.markdown("### üóìÔ∏è ‡πÅ‡∏ú‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏°‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°")
    try:
        with open("meeting_plan_gantt_updated.html", "r", encoding="utf-8") as f:
            st.components.v1.html(f.read(), height=600, scrolling=True)
    except FileNotFoundError:
        st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå Gantt Chart: ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏≤‡∏á 'meeting_plan_gantt_updated.html' ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô")
